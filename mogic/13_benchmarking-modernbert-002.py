# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_benchmarking_nvembed_bm25.ipynb.

# %% auto 0
__all__ = ['pkl_dir', 'data_dir', 'output_dir', 'pkl_file', 'block', 'input_text', 'tokenized_text', 'model', 'o', 'prompt_func',
           'RepresentationHead', 'NVM0XXEncoder', 'NVM009']

import os,torch, torch.multiprocessing as mp, pickle, numpy as np, math, transformers, torch.nn as nn
import torch.nn.functional as F
from transformers import AutoTokenizer, AutoModel, AutoModelForMaskedLM, PreTrainedModel, PretrainedConfig

from xcai.basics import *

from xclib.utils.sparse import retain_topk

from fastcore.utils import *
from fastcore.meta import *

os.environ['CUDA_VISIBLE_DEVICES'] = '14,15'
os.environ['WANDB_MODE'] = 'disabled'

import torch.nn as nn
from xcai.losses import MultiTriplet

from xcai.models.modeling_utils import XCModelOutput, Pooling

from modernbert import ModernBertModel

import torch._dynamo
torch._dynamo.config.suppress_errors = True

class MBT0XXEncoder(PreTrainedModel):
    
    def __init__(self, config, **kwargs):
        super().__init__(config)
        self.model = ModernBertModel.from_pretrained("answerdotai/ModernBERT-base") 
        
    def forward(
        self, 
        input_ids:Optional[torch.Tensor]=None, 
        attention_mask:Optional[torch.Tensor]=None,
        pool_mask: Optional[torch.Tensor]=None,
        return_dict: bool=True,
        **kwargs
    ):
        outputs = self.model(
            input_ids=input_ids,
            attention_mask=attention_mask,
        )
        return outputs, F.normalize(Pooling.mean_pooling(outputs[0], attention_mask), dim=1)
    

# %% ../nbs/03_benchmarking_nvembed_bm25.ipynb 36
class MBT009(PreTrainedModel):
    use_generation,use_representation = False,True
    
    def __init__(self,
                 config, 
                 bsz:Optional[int]=None,
                 tn_targ:Optional[int]=None,
                 margin:Optional[float]=0.3,
                 tau:Optional[float]=0.1,
                 apply_softmax:Optional[bool]=False,
                 n_negatives:Optional[int]=5,
                 use_encoder_parallel:Optional[bool]=True,
                 *args, **kwargs):
        super().__init__(config, *args, **kwargs)
        store_attr('use_encoder_parallel')
        self.encoder = MBT0XXEncoder(config)
        self.loss_fn = MultiTriplet(bsz=bsz, tn_targ=tn_targ, margin=margin, n_negatives=n_negatives, tau=tau, 
                                    apply_softmax=apply_softmax, reduce='mean')
        
    def forward(
        self,
        data_input_ids:Optional[torch.Tensor]=None,
        data_attention_mask:Optional[torch.Tensor]=None,
        lbl2data_data2ptr:Optional[torch.Tensor]=None,
        lbl2data_idx:Optional[torch.Tensor]=None,
        lbl2data_input_ids:Optional[torch.Tensor]=None,
        lbl2data_attention_mask:Optional[torch.Tensor]=None,
        plbl2data_data2ptr:Optional[torch.Tensor]=None,
        plbl2data_idx:Optional[torch.Tensor]=None,
        return_dict: Optional[bool] = None,
        **kwargs
    ):
        return_dict = return_dict if return_dict is not None else self.encoder.model.config.use_return_dict
        
        if self.use_encoder_parallel: 
            encoder = nn.DataParallel(module=self.encoder)
        else: encoder = self.encoder
        
        data_o, data_repr = encoder(data_input_ids, data_attention_mask)
        
        loss, lbl2data_repr = None, None
        if lbl2data_input_ids is not None:
            lbl2data_o, lbl2data_repr = encoder(lbl2data_input_ids, lbl2data_attention_mask)
            
            loss = self.loss_fn(data_repr, lbl2data_repr, lbl2data_data2ptr, lbl2data_idx, 
                                plbl2data_data2ptr, plbl2data_idx, **kwargs)

        if not return_dict:
            o = (data_repr, lbl2data_repr)
            return ((loss,) + o) if loss is not None else o

        return XCModelOutput(
            loss=loss,
            data_repr=data_repr,
            lbl2data_repr=lbl2data_repr,
        )

if __name__ == '__main__':
    build_block = False
    dataset = 'amazontitles'

    data_dir = '/data/datasets/G_Datasets/'
    pkl_dir = '/home/aiscuser/scratch1/datasets/'
    output_dir = '/home/aiscuser/scratch1/outputs/mogic/13_benchmarking-modernbert-002'
    
    pkl_file = f'{pkl_dir}/processed/{dataset}_data_modern-bert_xcs.pkl'
    if build_block:
        block = XCBlock.from_cfg('data', data_dir, dset=dataset, transform_type='xcs', tokenizer="answerdotai/ModernBERT-base",
                                 sampling_features=[('lbl2data',1)], oversample=False)
        with open(pkl_file, 'wb') as file: pickle.dump(block, file)
        exit()
    else:
        with open(pkl_file, 'rb') as file: block = pickle.load(file)
    
    """ Training arguements """
    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=800,
        per_device_eval_batch_size=800,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        evaluation_strategy="steps",
        eval_steps=5000,
        save_steps=5000,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        adam_epsilon=1e-6,
        warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-4,
        representation_search_type='BRUTEFORCE',
        
        output_representation_attribute='data_repr',
        label_representation_attribute='data_repr',
        metadata_representation_attribute='data_repr',
        data_augmentation_attribute='data_repr',
        representation_attribute='data_repr',
        clustering_representation_attribute='data_repr',
    
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        use_data_metadata_for_clustering=True,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,

        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
        
        use_distributional_representation=False,
        use_encoder_parallel=True,
        max_grad_norm=None, 
        fp16=True,
        
        label_names=['lbl2data_idx', 'lbl2data_input_ids', 'lbl2data_attention_mask'],
    
        predict_with_augmentation=False,
        use_augmentation_index_representation=True,
    
        use_cpu_for_searching=False,
        use_cpu_for_clustering=True,
    )
    
    model = MBT009(PretrainedConfig(), bsz=1024, margin=0.3, tau=0.1, n_negatives=10, apply_softmax=True, use_encoder_parallel=False)

    """ Training """
    metric = PrecRecl(block.n_lbl, block.test.data_lbl_filterer, prop=block.train.dset.data.data_lbl,
                      pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200])

    learn = XCLearner(
        model=model, 
        args=args,
        train_dataset=block.train.dset,
        eval_dataset=block.test.dset,
        data_collator=block.collator,
        compute_metrics=metric,
    )

    print(learn.evaluate())
