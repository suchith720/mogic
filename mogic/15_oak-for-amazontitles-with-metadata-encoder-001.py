# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_oak-for-wikiseealsotitles-trained-with-linker-predictions.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/00_oak-for-wikiseealsotitles-trained-with-linker-predictions.ipynb 2
import os,torch, torch.multiprocessing as mp, pickle, numpy as np, math, transformers
from transformers import DistilBertConfig

from xcai.basics import *
from xcai.models.oakY import OAK003, Encoder003

from xclib.utils.sparse import retain_topk

from fastcore.utils import *

# %% ../nbs/00_oak-for-wikiseealsotitles-trained-with-linker-predictions.ipynb 4
os.environ['CUDA_VISIBLE_DEVICES'] = '4,5'
os.environ['WANDB_PROJECT']='oakVn_01-amazontitles131'

@patch
def fuse_meta_into_embeddings(self:Encoder003, embed:torch.Tensor, meta_kwargs:Dict):
    meta_repr = {}
    for m_key, m_args in meta_kwargs.items():
        idx = torch.where(m_args['data2ptr'] > 0)[0]

        if len(idx):
            n_meta = m_args['data2ptr'].max()
            assert torch.all(m_args['data2ptr'][idx] == n_meta), f'All datapoints should have same number of metadata.'
            
            m_input_ids, m_attention_mask = m_args['input_ids'], m_args['attention_mask']
            m_embed = self.meta_encode(input_ids=m_input_ids, attention_mask=m_attention_mask)
            meta_repr[m_key] = m_embed
                    
            m_embed = m_embed.view(len(idx), -1, self.config.dim)  
            fused_embed = self.cross_head(embed[idx], m_embed)
            embed[idx] = embed[idx] + fused_embed
           
    return embed, meta_repr

# %% ../nbs/00_oak-for-wikiseealsotitles-trained-with-linker-predictions.ipynb 6
if __name__ == '__main__':
    build_block = False
    pkl_dir = '/home/aiscuser/scratch1/datasets/'
    data_dir = '/data/From_B/'
    
    output_dir = '/home/aiscuser/scratch1/outputs/mogic/15_oak-for-amazontitles-with-metadata-encoder-001'

    """ Load data """
    pkl_file = f'{pkl_dir}/processed/amazontitles131_data-rev_distilbert-base-uncased_xcs.pkl'

    if build_block:
        block = XCBlock.from_cfg(data_dir, 'data_rev', dset='amazontitles131', transform_type='xcs', tokenizer='distilbert-base-uncased', 
                                 sampling_features=[('lbl2data',1), ('rev2data',5)], oversample=False)
        with open(pkl_file, 'wb') as file: pickle.dump(block, file)
        exit()
    else:
        with open(pkl_file, 'rb') as file: block = pickle.load(file)
    
    """ Prune metadata """
    block.collator.tfms.tfms[0].sampling_features = [('lbl2data',1),('rev2data',5)]
    block.collator.tfms.tfms[0].oversample = True
    
    """ Training arguements """
    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=800,
        per_device_eval_batch_size=800,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        evaluation_strategy="steps",
        eval_steps=5000,
        save_steps=5000,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        adam_epsilon=1e-6,
        warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-4,
        representation_search_type='BRUTEFORCE',
        
        output_representation_attribute='data_fused_repr',
        label_representation_attribute='data_repr',
        metadata_representation_attribute='data_repr',
        data_augmentation_attribute='data_repr',
        representation_attribute='data_fused_repr',
        clustering_representation_attribute='data_fused_repr',
    
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        use_data_metadata_for_clustering=True,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,

        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
        
        use_distributional_representation=False,
        use_encoder_parallel=True,
        max_grad_norm=None, 
        fp16=True,
        
        label_names=['lbl2data_idx', 'lbl2data_input_ids', 'lbl2data_attention_mask', 'rev2data_idx', 'rev2data_input_ids', 'rev2data_attention_mask'],
        
        prune_metadata=False,
        num_metadata_prune_warmup_epochs=10,
        num_metadata_prune_epochs=5,
        metadata_prune_batch_size=2048,
        prune_metadata_names=['rev_meta'],
        use_data_metadata_for_pruning=True,
    
        predict_with_augmentation=False,
        use_augmentation_index_representation=True,
    
        data_aug_meta_name='rev',
        augmentation_num_beams=None,
        data_aug_prefix='rev',
        use_label_metadata=False,
        
        data_meta_batch_size=2048,
        augment_metadata=False,
        num_metadata_augment_warmup_epochs=10,
        num_metadata_augment_epochs=5,
    
        use_cpu_for_searching=False,
        use_cpu_for_clustering=True,
    )

    """ model """
    bsz = max(args.per_device_train_batch_size, args.per_device_eval_batch_size)*torch.cuda.device_count()
    model = OAK003.from_pretrained('sentence-transformers/msmarco-distilbert-base-v4', batch_size=bsz, num_batch_labels=5000, 
                                   margin=0.3, num_negatives=10, tau=0.1, apply_softmax=True,
                               
                                   data_aug_meta_prefix='rev2data', lbl2data_aug_meta_prefix=None, 
                                   data_pred_meta_prefix=None, lbl2data_pred_meta_prefix=None,
                                   
                                   calib_margin=0.05, calib_num_negatives=10, calib_tau=0.1, calib_apply_softmax=False, 
                                   calib_loss_weight=0.1, use_calib_loss=True,
    
                                   use_query_loss=True,
    
                                   use_encoder_parallel=True)
    
    model.init_retrieval_head()
    model.init_cross_head()
    model.init_meta_encoder()

    """ Training """
    metric = PrecRecl(block.n_lbl, block.test.data_lbl_filterer, prop=block.train.dset.data.data_lbl,
                      pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200])

    learn = XCLearner(
        model=model, 
        args=args,
        train_dataset=block.train.dset,
        eval_dataset=block.test.dset,
        data_collator=block.collator,
        compute_metrics=metric,
    )
    
    learn.train()
