# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_ngame-for-wikiseealsotitles-with-input-concatenation.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/00_ngame-for-wikiseealsotitles-with-input-concatenation.ipynb 2
import os,torch,json, torch.multiprocessing as mp, pickle, numpy as np, scipy.sparse as sp
from tqdm.auto import tqdm
from xcai.basics import *
from xcai.models.PPP0XX import DBT009,DBT011
from xclib.utils.sparse import retain_topk

# %% ../nbs/00_ngame-for-wikiseealsotitles-with-input-concatenation.ipynb 4
os.environ['CUDA_VISIBLE_DEVICES'] = '2,3'
os.environ['WANDB_PROJECT'] = 'linker_01-msmarco'

# %% ../nbs/00_ngame-for-wikiseealsotitles-with-input-concatenation.ipynb 26
if __name__ == '__main__':
    build_block = False
    do_prediction = True

    pkl_dir = '/home/aiscuser/scratch1/datasets/'
    output_dir = '/home/aiscuser/scratch1/outputs/mogic/17_entity-ngame-linker-for-msmarco-001'
    config_file = 'configs/msmarco-entity.json'

    """ Load data """
    pkl_file = f'{pkl_dir}/processed/msmarco_data-entity1_distilbert-base-uncased_sxc.pkl'
    if build_block:
        config = load_config(config_file, 'data_entity1')
        block = SXCBlock.from_cfg(config, tokenizer="distilbert-base-uncased", padding=True, return_tensors='pt', 
                main_max_data_sequence_length=32, n_slbl_samples=1, main_oversample=False, n_sdata_meta_samples=1, 
                n_slbl_meta_samples=1, meta_oversample=False)

        with open(pkl_file, 'wb') as file: pickle.dump(block, file)
        exit()
    else:
        with open(pkl_file, 'rb') as file: block = pickle.load(file)

    linker_block = block.linker_dset('ent_meta')

    """ Training Arguements """
    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=800,
        per_device_eval_batch_size=800,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        evaluation_strategy="steps",
        eval_steps=5000,
        save_steps=5000,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        representation_search_type='BRUTEFORCE',
        adam_epsilon=1e-6,
        warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-6,
        
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,
        
        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
        
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,
    )

    metric = PrecRecl(linker_block.n_lbl, linker_block.test.data_lbl_filterer, prop=linker_block.train.dset.data.data_lbl,
                      pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200])

    """ Model """
    bsz = max(args.per_device_train_batch_size, args.per_device_eval_batch_size)*torch.cuda.device_count()

    if do_prediction:
        os.environ['WANDB_MODE'] = 'disabled'
        mname = get_best_model(output_dir)
        model = DBT009.from_pretrained(mname, bsz=bsz, tn_targ=5000, margin=0.3, tau=0.1, n_negatives=10, apply_softmax=True, use_encoder_parallel=True)
    else:
        model = DBT009.from_pretrained('sentence-transformers/msmarco-distilbert-base-v4', bsz=bsz, tn_targ=5000, margin=0.3, tau=0.1, 
                                       n_negatives=10, apply_softmax=True, use_encoder_parallel=True)
        model.init_dr_head()
    
    learn = XCLearner(
        model=model, 
        args=args,
        train_dataset=linker_block.train.dset,
        eval_dataset=linker_block.test.dset,
        data_collator=linker_block.collator,
        compute_metrics=metric,
    )

    def get_output(pred_idx, pred_ptr, pred_score, n_lbl, **kwargs):
        n_data = pred_ptr.shape[0]
        pred_ptr = torch.cat([torch.zeros((1,), dtype=torch.long), pred_ptr.cumsum(dim=0)])
        pred = sp.csr_matrix((pred_score,pred_idx,pred_ptr), shape=(n_data, n_lbl))
        return pred

    if do_prediction:
        o = learn.predict(linker_block.test.dset)
        print(o.metrics)

        pred_dir = f'{output_dir}/predictions'
        os.makedirs(pred_dir, exist_ok=True)

        with open(f'{pred_dir}/test_predictions.pkl', 'wb') as file:
            pickle.dump(o, file)

        pred = get_output(o.pred_idx, o.pred_ptr, o.pred_score, n_lbl=block.n_lbl)
        sp.save_npz(f'{pred_dir}/test_predictions.npz', pred)
    else:
        learn.train()

