# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_ngame-for-wikiseealsotitles-with-input-concatenation.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/00_ngame-for-wikiseealsotitles-with-input-concatenation.ipynb 2
import os,torch, torch.multiprocessing as mp, pickle, numpy as np, scipy.sparse as sp

from xcai.data import MetaXCData
from xcai.sdata import *
from xcai.basics import *
from xcai.models.PPP0XX import DBT009,DBT011
from xcai.sdata import identity_collate_fn

from transformers.trainer_utils import RemoveColumnsCollator
from transformers import BatchEncoding

from fastcore.utils import *

from xcai.data import _read_sparse_file
from xcai.core import Info

from xclib.utils.sparse import retain_topk

# %% ../nbs/00_ngame-for-wikiseealsotitles-with-input-concatenation.ipynb 4
os.environ['CUDA_VISIBLE_DEVICES'] = '8,9'
os.environ['WANDB_PROJECT']='linker_01-amazontitles131'


@patch
def __call__(self:RemoveColumnsCollator, features):
    if isinstance(features, list):
        features = [self._remove_columns(feature) for feature in features]
    elif isinstance(features, dict) or isinstance(features, BatchEncoding):
        features = self._remove_columns(features)
    else:
        raise ValueError(f'Invalid input type: {type(features)}')
    return self.data_collator(features)

def get_prediction_metadata_dset(test_info, test_meta, meta_info, **kwargs):
    x_idx = np.where(test_meta.getnnz(axis=1) == 0)[0].reshape(-1,1)
    y_idx = np.zeros((len(x_idx),1), dtype=np.int64)
    test_meta[x_idx, y_idx] = 1
    data_lbl_filterer = np.hstack([x_idx, y_idx])

    pred_dset = SXCDataset(SMainXCDataset(data_info=test_info, data_lbl=test_meta, lbl_info=meta_info,
        data_lbl_filterer=data_lbl_filterer, n_slbl_samples=1, main_oversample=False))

    return pred_dset

# %% ../nbs/00_ngame-for-wikiseealsotitles-with-input-concatenation.ipynb 26
if __name__ == '__main__':
    build_block = False
    predict = False

    if predict: 
        os.environ['WANDB_MODE'] = 'disabled'

    data_dir = '/data/From_B'
    pkl_dir = '/home/aiscuser/scratch1/datasets/'
    output_dir = '/home/aiscuser/scratch1/outputs/mogic/15_ngame-reviews-linker-for-amazontitles131-001'
    
    pkl_file = f'{pkl_dir}/processed/amazontitles131_reviews-meta_distilbert-base-uncased_sxc.pkl'
    if build_block:
        from xcai.config import PARAM
        PARAM.update({'tokenizer':'distilbert-base-uncased', 'padding':True, 'return_tensors': 'pt', 
            'max_sequence_length': 32, 'n_slbl_samples': 1, 'main_oversample': False})

        cfg = {
            'path': {
                'train': {
                    'data_lbl': f'{data_dir}/LF-AmazonTitles-131K/reviews_trn_X_Y.npz',
                    'data_info': f'{data_dir}/LF-AmazonTitles-131K/raw_data/train.raw.txt',
                    'lbl_info': f'{data_dir}/LF-AmazonTitles-131K/raw_data/reviews.raw.txt',
                },
                'test': {
                    'data_lbl': f'{data_dir}/LF-AmazonTitles-131K/reviews_tst_X_Y.npz',
                    'data_info': f'{data_dir}/LF-AmazonTitles-131K/raw_data/test.raw.txt',
                    'lbl_info': f'{data_dir}/LF-AmazonTitles-131K/raw_data/reviews.raw.txt',
                },
            },
            'parameters': PARAM,
        }

        block = SXCDataBlock.from_cfg(cfg)
        with open(pkl_file, 'wb') as file: pickle.dump(block, file)
        exit()
    else:
        with open(pkl_file, 'rb') as file: block = pickle.load(file)

    # train
    train_meta = block.train.dset.data.data_lbl
    train_info = block.train.dset.data.data_info
    meta_info = block.train.dset.data.lbl_info

    train_idx = np.where(train_meta.getnnz(axis=1) > 0)[0]
    meta_idx = np.where(train_meta.getnnz(axis=0) > 0)[0]

    train_meta = train_meta[train_idx][:, meta_idx].tocsr()

    # test
    test_meta = block.test.dset.data.data_lbl[:, meta_idx].tocsr()
    test_info = block.test.dset.data.data_info

    test_idx = np.where(test_meta.getnnz(axis=1) > 0)[0]

    test_meta = test_meta[test_idx].tocsr()

    def sample_info(info, idx):
        return {k: v[idx] if isinstance(v, torch.Tensor) or isinstance(v, np.ndarray) else [v[i] for i in idx] for k,v in info.items()}

    # info
    train_info = sample_info(train_info, train_idx)
    test_info = sample_info(test_info, test_idx)
    meta_info = sample_info(meta_info, meta_idx)

    train_dset = SXCDataset(SMainXCDataset(data_info=train_info, data_lbl=train_meta, lbl_info=meta_info, n_slbl_samples=1, main_oversample=False))
    test_dset = SXCDataset(SMainXCDataset(data_info=test_info, data_lbl=test_meta, lbl_info=meta_info, n_slbl_samples=1, main_oversample=False))

    """ Training Arguements """
    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=400,
        per_device_eval_batch_size=400,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        evaluation_strategy="steps",
        eval_steps=5000,
        save_steps=5000,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        representation_search_type='BRUTEFORCE',
        adam_epsilon=1e-6,
        warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-4,
        
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,
        
        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
        
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,
    )

    metric = PrecRecl(test_dset.n_lbl, test_dset.data.data_lbl_filterer, prop=train_dset.data.data_lbl,
                      pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200])

    """ Model """
    bsz = max(args.per_device_train_batch_size, args.per_device_eval_batch_size)*torch.cuda.device_count()
    if predict:
        mname = get_best_model(output_dir)
        model = DBT009.from_pretrained(mname, bsz=bsz, tn_targ=5000, margin=0.3, tau=0.1, n_negatives=10, apply_softmax=True, use_encoder_parallel=True)
    else:
        model = DBT009.from_pretrained('sentence-transformers/msmarco-distilbert-base-v4', bsz=bsz, tn_targ=5000, margin=0.3, tau=0.1, 
                                       n_negatives=10, apply_softmax=True, use_encoder_parallel=True)
        model.init_dr_head()

    
    learn = XCLearner(
        model=model, 
        args=args,
        train_dataset=train_dset,
        eval_dataset=test_dset,
        data_collator=block.collator,
        compute_metrics=metric,
    )
    
    if predict:
        print(model.evaluate())
    else: 
        learn.train()

