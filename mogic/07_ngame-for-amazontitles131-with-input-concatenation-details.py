# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/38_ngame-for-amazontitles131-with-input-concatenation.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/38_ngame-for-amazontitles131-with-input-concatenation.ipynb 2
import os,torch, torch.multiprocessing as mp, pickle, numpy as np
from xcai.basics import *
from xcai.models.PPP0XX import DBT009,DBT011

from xcai.core import Info

# %% ../nbs/38_ngame-for-amazontitles131-with-input-concatenation.ipynb 4
os.environ['CUDA_VISIBLE_DEVICES'] = '6,7'
os.environ['WANDB_PROJECT']='oakVn_01-amazontitles131'

# %% ../nbs/38_ngame-for-amazontitles131-with-input-concatenation.ipynb 6
if __name__ == '__main__':
    build_block = False
    meta_type = 'details'

    data_dir = '/data/From_B/'
    pkl_dir = '/home/aiscuser/scratch1/datasets/'

    output_dir = f'/home/aiscuser/scratch1/outputs/mogic/07_ngame-for-amazontitles131-with-input-concatenation-{meta_type}'

    info_args = dict( 
            sep='->', 
            info_column_names=['identifier', 'input_text'],
            enc='utf-8',
            use_tokenizer=True,
            tokenizer='distilbert-base-uncased',
            tokenization_column='input_text',
            max_sequence_length=128,
            padding=False
        )

    def combine_info(title_toks, title_mask, meta_toks, meta_mask, sep_tok):
        all_toks, all_mask = [], []
        for title, title_mask, meta, meta_mask in zip(title_toks, title_mask, meta_toks, meta_mask):
            t = title + meta[1:-1]
            m = title_mask + meta_mask[1:-1]
            all_toks.append(t[:127] + [sep_tok])
            all_mask.append(m[:127] + [sep_tok])
        return all_toks, all_mask

    """ Load data """

    pkl_file = f'{pkl_dir}/processed/amazontitles131_data_distilbert-base-uncased_xcs_{meta_type}-128.pkl'
    if build_block:
        block = XCBlock.from_cfg(data_dir, 'data', dset='amazontitles131', transform_type='xcs', tokenizer='distilbert-base-uncased', 
                                 sampling_features=[('lbl2data',1)], oversample=False)

        info_dir = f'{data_dir}/LF-AmazonTitles-131K/raw_data/'

        # train info
        train_info = Info.from_txt(f'{info_dir}/train.{meta_type}.txt', **info_args)
        data_info = block.train.dset.data.data_info
        data_info['input_ids'], data_info['attention_mask'] = combine_info(data_info['input_ids'], data_info['attention_mask'], train_info['input_ids'], train_info['attention_mask'], 102)

        # test info
        test_info = Info.from_txt(f'{info_dir}/test.{meta_type}.txt', **info_args)
        data_info = block.test.dset.data.data_info
        data_info['input_ids'], data_info['attention_mask'] = combine_info(data_info['input_ids'], data_info['attention_mask'], test_info['input_ids'], test_info['attention_mask'], 102)

        # label info
        label_info = Info.from_txt(f'{info_dir}/label.{meta_type}.txt', **info_args)
        info = block.train.dset.data.lbl_info
        ids, attention_mask = combine_info(info['input_ids'], info['attention_mask'], label_info['input_ids'], label_info['attention_mask'], 102)

        block.train.dset.data.lbl_info['input_ids'], block.train.dset.data.lbl_info['attention_mask'] = ids, attention_mask
        block.test.dset.data.lbl_info['input_ids'], block.test.dset.data.lbl_info['attention_mask'] = ids, attention_mask

        with open(pkl_file, 'wb') as file: pickle.dump(block, file)
        exit()
    else:
        with open(pkl_file, 'rb') as file: block = pickle.load(file)

    block.collator.tfms.tfms[0].sampling_features = [('lbl2data',1)]
    block.collator.tfms.tfms[0].oversample = False

    """ Training Arguements """
    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=800,
        per_device_eval_batch_size=800,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        evaluation_strategy="steps",
        eval_steps=5000,
        save_steps=5000,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        representation_search_type='BRUTEFORCE',
        adam_epsilon=1e-6,
        warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-4,
        
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,
        
        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
        
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,
    )

    metric = PrecRecl(block.n_lbl, block.test.data_lbl_filterer, prop=block.train.dset.data.data_lbl,
                      pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200])

    """ Model """
    bsz = max(args.per_device_train_batch_size, args.per_device_eval_batch_size)*torch.cuda.device_count()
    model = DBT009.from_pretrained('sentence-transformers/msmarco-distilbert-base-v4', bsz=bsz, tn_targ=5000, margin=0.3, tau=0.1, 
                                   n_negatives=10, apply_softmax=True, use_encoder_parallel=True)
    model.init_dr_head()

    
    learn = XCLearner(
        model=model, 
        args=args,
        train_dataset=block.train.dset,
        eval_dataset=block.test.dset,
        data_collator=block.collator,
        compute_metrics=metric,
    )
    
    learn.train()
    
