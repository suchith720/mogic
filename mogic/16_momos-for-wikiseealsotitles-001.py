# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/31_momos-for-wikiseealsotitles.ipynb.

# %% auto 0
__all__ = ['get_label_representation', 'get_label_remap']

# %% ../nbs/31_momos-for-wikiseealsotitles.ipynb 2
import os,torch, torch.multiprocessing as mp, pickle, numpy as np, scipy.sparse as sp
from transformers import DistilBertConfig

from xcai.basics import *
from xcai.models.oak import OAK008
from xcai.models.distillation import DTL004,TCH001,TCH002
from xcai.clustering.cluster import BalancedClusters

from xclib.utils.sparse import retain_topk

from fastcore.utils import *

from xcai.data import MetaXCDataset

# %% ../nbs/31_momos-for-wikiseealsotitles.ipynb 4
os.environ['CUDA_VISIBLE_DEVICES'] = '10,11'
os.environ['WANDB_PROJECT']='mogic_00-wikiseealsotitles'

# %% ../nbs/31_momos-for-wikiseealsotitles.ipynb 6
@patch
def get_label_representation(
    cls:DTL004,
    data_idx:Optional[torch.Tensor]=None,
    data_input_ids:Optional[torch.Tensor]=None,
    data_attention_mask:Optional[torch.Tensor]=None,
    **kwargs
):
    return cls.m_student.get_label_representation(data_idx, data_input_ids, data_attention_mask, **kwargs)
    

# %% ../nbs/31_momos-for-wikiseealsotitles.ipynb 7
def get_label_remap(lbl_repr:torch.Tensor, cluster_sz:int=3):
    clusters = BalancedClusters.proc(lbl_repr.half(), min_cluster_sz=cluster_sz)

    lbl_remap = torch.zeros(lbl_repr.shape[0], dtype=torch.int64)
    for i,o in enumerate(clusters): lbl_remap[o] = i

    return lbl_remap, len(clusters)

# def load_metadata(meta_dir):
#     data_cfg = {
#         'info_column_names': ['identifier', 'input_text'],
#         'use_tokenizer': True,
#         'tokenizer': 'distilbert-base-uncased',
#         'tokenization_column': 'input_text',
#         'max_sequence_length': 32,
#         'padding': False,
#         'return_tensors': None,
#     }
#     return Info.from_txt(f'{meta_dir}/raw_data/category.raw.txt', **data_cfg)
# 
# expanded2original_meta_mapping = np.load('/home/aiscuser/scratch1/outputs/mogic/14_ngame-linker-for-wikiseealsotitles-001/predictions/expanded2original_meta_mapping.npy')
# 
# meta_dir = '/home/aiscuser/scratch1/datasets/LF-WikiSeeAlsoTitles-320K'
# new_meta_info = load_metadata(meta_dir)
# 
# meta_dir = '/data/datasets/(mapped)LF-WikiSeeAlsoTitles-320K/'
# old_meta_info = load_metadata(meta_dir)
# 
# old_identifier = set(old_meta_info['identifier'])
# new_meta_idx = [i for i,o in enumerate(new_meta_info['identifier']) if o not in old_identifier]
# 
# meta_mapping = np.hstack([np.arange(656086), expanded2original_meta_mapping[new_meta_idx]])
# 
# @patch
# def get_data_meta(self:MetaXCDataset, idx:int):
#     prefix = f'{self.prefix}2data'
# 
#     # x = {f'{prefix}_idx': [expanded2original_meta_mapping[o] for o in self.curr_data_meta[idx]]}
#     x = {f'{prefix}_idx': [meta_mapping[o] for o in self.curr_data_meta[idx]]}
# 
#     if self.n_data_meta_samples: x[f'{prefix}_idx'] = [x[f'{prefix}_idx'][i] for i in np.random.permutation(len(x[f'{prefix}_idx']))[:self.n_data_meta_samples]]
#     if self.meta_info is not None:
#         x.update({f'{prefix}_{k}':[v[i] for i in x[f'{prefix}_idx']] for k,v in self.meta_info.items() if k in self.meta_info_keys})
#     return x


# %% ../nbs/31_momos-for-wikiseealsotitles.ipynb 8
if __name__ == '__main__':
    build_block = False
    predict = True

    data_dir = '/data/datasets'
    pkl_dir = '/home/aiscuser/scratch1/datasets/'

    output_dir = '/home/aiscuser/scratch1/outputs/medic/31_momos-for-wikiseealsotitles-001'
    model_output = '/data/Projects/xc_nlg/outputs//67-ngame-ep-for-wikiseealso-with-input-concatenation-6-3'
    meta_embed_file = '/data/OGB_Weights/LF-WikiSeeAlsoTitles-320K/emb_weights.npy'

    """ Load data """
    pkl_file = f'{pkl_dir}/processed/wikiseealsotitles_data-lnk_distilbert-base-uncased_xcs.pkl'

    if build_block:
        block = XCBlock.from_cfg(data_dir, 'data_lnk', transform_type='xcs', tokenizer='distilbert-base-uncased', 
                                 sampling_features=[('lbl2data',4), ('lnk2data',3)], oversample=False)
        with open(pkl_file, 'wb') as file: pickle.dump(block, file)
    else:
        with open(pkl_file, 'rb') as file: block = pickle.load(file)

    """ Prune metadata """
    data_meta = retain_topk(block.train.dset.meta.lnk_meta.data_meta, k=5)
    lbl_meta = block.train.dset.meta.lnk_meta.lbl_meta
    block.train.dset.meta.lnk_meta.update_meta_matrix(data_meta, lbl_meta)

    # m1 = sp.load_npz('/home/aiscuser/scratch1/outputs/mogic/14_ngame-linker-for-wikiseealsotitles-001/predictions/test_predictions.npz')
    # m2 = sp.load_npz('/home/aiscuser/scratch1/outputs/mogic/14_ngame-linker-for-wikiseealsotitles-001/predictions/expanded_test_predictions.npz')
    # m2 = m2[:, new_meta_idx]
    # data_meta = retain_topk(sp.hstack([m1,m2]), k=3)

    # data_meta = retain_topk(sp.load_npz('/home/aiscuser/scratch1/outputs/mogic/14_ngame-linker-for-wikiseealsotitles-001/predictions/expanded_test_predictions.npz'), k=3)

    data_meta = retain_topk(block.test.dset.meta.lnk_meta.data_meta, k=3)
    lbl_meta = block.test.dset.meta.lnk_meta.lbl_meta
    block.test.dset.meta.lnk_meta.update_meta_matrix(data_meta, lbl_meta)

    block.collator.tfms.tfms[0].sampling_features = [('lbl2data',4),('lnk2data',3)]
    block.collator.tfms.tfms[0].oversample = False
    
    block.train.dset.meta.lnk_meta.meta_info = None
    block.test.dset.meta.lnk_meta.meta_info = None

    """ Training arguements """
    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=1024,
        per_device_eval_batch_size=1024,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        evaluation_strategy="steps",
        eval_steps=5000,
        save_steps=5000,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        adam_epsilon=1e-6,
        warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-4,
        representation_search_type='BRUTEFORCE',
        
        output_representation_attribute='data_fused_repr',
        label_representation_attribute='data_repr',
        metadata_representation_attribute='data_repr',
        data_augmentation_attribute='data_repr',
        representation_attribute='data_fused_repr',
        clustering_representation_attribute='data_fused_repr',
    
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        use_data_metadata_for_clustering=True,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,

        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
        
        use_distributional_representation=False,
        use_encoder_parallel=True,
        max_grad_norm=None, 
        fp16=True,
        
        label_names=['lbl2data_idx', 'lbl2data_input_ids', 'lbl2data_attention_mask', 'lnk2data_idx'],
        
        prune_metadata=False,
        num_metadata_prune_warmup_epochs=10,
        num_metadata_prune_epochs=5,
        metadata_prune_batch_size=2048,
        prune_metadata_names=['lnk_meta'],
        use_data_metadata_for_pruning=True,
    
        predict_with_augmentation=False,
        use_augmentation_index_representation=True,
    
        data_aug_meta_name='lnk',
        augmentation_num_beams=None,
        data_aug_prefix='lnk',
        use_label_metadata=False,
        
        data_meta_batch_size=2048,
        augment_metadata=False,
        num_metadata_augment_warmup_epochs=10,
        num_metadata_augment_epochs=5,
    
        use_cpu_for_searching=True,
        use_cpu_for_clustering=True,
    )

    if predict:
        m_teacher = TCH001(DistilBertConfig(), n_data=block.train.dset.n_data, n_lbl=block.n_lbl)
        n_clusters = 131072

        """ Student model """
        bsz = max(args.per_device_train_batch_size, args.per_device_eval_batch_size)*torch.cuda.device_count()

        m_student = OAK008(DistilBertConfig(), batch_size=bsz, num_batch_labels=5000,
                margin=0.3, num_negatives=10, tau=0.1, apply_softmax=True,
                                           
                data_aug_meta_prefix='lnk2data', lbl2data_aug_meta_prefix=None,
                data_pred_meta_prefix=None, lbl2data_pred_meta_prefix=None,
                
                num_metadata=block.train.dset.meta['lnk_meta'].n_meta, resize_length=5000,
                n_clusters=n_clusters, n_labels=block.n_lbl,
                
                calib_margin=0.05, calib_num_negatives=10, calib_tau=0.1, calib_apply_softmax=False,
                calib_loss_weight=0.1, use_calib_loss=True,
                
                use_query_loss=True,
                
                meta_loss_weight=0.0,
                
                fusion_loss_weight=0.1, use_fusion_loss=False,
                
                use_encoder_parallel=True)

        os.environ['WANDB_MODE'] = 'disabled'

        mname = get_best_model(output_dir)
        model = DTL004.from_pretrained(mname, m_student=m_student, m_teacher=m_teacher, bsz=bsz, tn_targ=5000, margin=0.3, tau=0.1, 
                       n_negatives=10, apply_softmax=True, teacher_data_student_label_loss_weight=1.0, 
                       student_data_teacher_label_loss_weight=0.0, data_mse_loss_weight=0.1, label_mse_loss_weight=0.0)

        metric = PrecRecl(block.n_lbl, block.test.data_lbl_filterer, prop=block.train.dset.data.data_lbl,
                          pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200])

        learn = XCLearner(
            model=model, 
            args=args,
            data_collator=block.collator,
            compute_metrics=metric,
        )

        o = learn.predict(block.test.dset)
        print(o.metrics)
    else:
        """ Teacher model """
        m_teacher = TCH001.from_pretrained(f'{model_output}/teacher', n_data=block.train.dset.n_data, n_lbl=block.n_lbl)
        m_teacher.freeze_embeddings()

        lbl_remap, n_clusters = get_label_remap(m_teacher.lbl_repr.weight, cluster_sz=3)

        """ Student model """
        bsz = max(args.per_device_train_batch_size, args.per_device_eval_batch_size)*torch.cuda.device_count()

        m_student = OAK008.from_pretrained('sentence-transformers/msmarco-distilbert-base-v4', batch_size=bsz, num_batch_labels=5000,
                                           margin=0.3, num_negatives=10, tau=0.1, apply_softmax=True,
                                           
                                           data_aug_meta_prefix='lnk2data', lbl2data_aug_meta_prefix=None,
                                           data_pred_meta_prefix=None, lbl2data_pred_meta_prefix=None,
                                           
                                           num_metadata=block.train.dset.meta['lnk_meta'].n_meta, resize_length=5000,
                                           n_clusters=n_clusters, n_labels=block.n_lbl,
                                           
                                           calib_margin=0.05, calib_num_negatives=10, calib_tau=0.1, calib_apply_softmax=False,
                                           calib_loss_weight=0.1, use_calib_loss=True,
                                           
                                           use_query_loss=True,
                                           
                                           meta_loss_weight=0.0,
                                           
                                           fusion_loss_weight=0.1, use_fusion_loss=False,
                                           
                                           use_encoder_parallel=True)
        m_student.init_retrieval_head()
        m_student.init_cross_head()
        m_student.init_meta_embeddings()
        m_student.init_label_embeddings()
        m_student.set_label_remap(lbl_remap)
        
        meta_embeddings = np.load(meta_embed_file)
        m_student.encoder.set_pretrained_meta_embeddings(torch.tensor(meta_embeddings, dtype=torch.float32))
        m_student.encoder.freeze_pretrained_meta_embeddings()

        model = DTL004(DistilBertConfig(), m_student=m_student, m_teacher=m_teacher, bsz=bsz, tn_targ=5000, margin=0.3, tau=0.1, 
                       n_negatives=10, apply_softmax=True, teacher_data_student_label_loss_weight=1.0, 
                       student_data_teacher_label_loss_weight=0.0, data_mse_loss_weight=0.1, label_mse_loss_weight=0.0)

        metric = PrecRecl(block.n_lbl, block.test.data_lbl_filterer, prop=block.train.dset.data.data_lbl,
                          pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200])

        learn = XCLearner(
            model=model, 
            args=args,
            train_dataset=block.train.dset,
            eval_dataset=block.test.dset,
            data_collator=block.collator,
            compute_metrics=metric,
        )
        learn.train()
    
